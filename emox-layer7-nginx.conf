#
# 
# v1.0 2023-11-12

location /emoxaccess {
            content_by_lua_block {
                -- Generate a UUID
                local uuid = ngx.var.request_id

                -- Set the UUID as a key with a TTL of 6 seconds
                ngx.shared.kv_store:set(uuid, 1, 6)

                ngx.say("UUID created: " .. uuid)
            }
        }


location /emoxcount {
            content_by_lua_block {
                -- Initialize a variable to store the count
                local count = 0

                -- Iterate through the shared dictionary to count entries
                local keys = ngx.shared.kv_store:get_keys()
                if keys then
                    for _, key in ipairs(keys) do
                        count = count + 1
                    end
                end

                -- Set the count in Redis
                local redix = require "redis"
                local red = redix:new()
                red:set_timeout(1000)  -- 1 second timeout for Redis operations

                local ok, err = red:connect("127.0.0.1", 6379)
                if not ok then
                    ngx.log(ngx.ERR, "Failed to connect to Redis: ", err)
                    return ngx.exit(500)
                end

                ok, err = red:set("request_count", count)
                if not ok then
                    ngx.log(ngx.ERR, "Failed to set count in Redis: ", err)
                end

                -- Keepalive the Redis connection
                local ok, err = red:set_keepalive(10000, 100)
                if not ok then
                    ngx.log(ngx.ERR, "Failed to set Redis keepalive: ", err)
                end

                ngx.say('{"count": ' .. count .. '}')
            }
        }
